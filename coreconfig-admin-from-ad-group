#!/bin/bash

###################################################################
#
# Script to assign admin rights based on the membership of an AD group
# with the Computers name. NoMAD caches user AD group membership, so 
# admin rights will remain, even when the machine is offsite.
#
# Date: Thu 15 Jun 2017 15:10:04 BST
# Version: 0.1.5
# Creator: dsavage
#
##################################################################


User_Name=`ls -l /dev/console | awk '{print $3}'`

echo $User_Name

Computer_Name=`/usr/sbin/scutil --get ComputerName | tr '[:upper:]' '[:lower:]'`

echo $Computer_Name

# Incase of a mismatch between the local folder and the username
Home_Path=`dscl . -read /Users/$User_Name | grep "NFSHomeDirectory" | grep '/Users/' | awk '{print $2}'`

# Path to the preference
NoMAD_Path="$Home_Path/Library/Preferences/com.trusourcelabs.NoMAD"

if ! [ -e "$NoMAD_Path"* ];
then
	exit 0; # NoMAD hasn't launched
fi

# Change Auth_User to use Kerberos, so it isn't relient on the preference.
Auth_User=`klist -v | grep "Principal:" | awk '{print $2}'`

if [ -z "$Auth_User" ];
then
	exit 0; # No Kerberos ticket.
fi

Admin_Group=`defaults read $NoMAD_Path "Groups" | grep -i "$Computer_Name" | awk -F '"' '{print $2}' | tr '[:upper:]' '[:lower:]'`

UUN=`echo $Auth_User | tr @ " " | awk '{print $1}'`

Who_is_Admin=`dscl . -read /Groups/admin | grep GroupMembership`

Admin_Exists=`echo $Who_is_Admin | tr " " "\n" | grep $User_Name` 

Admin_Users=( `launchctl asuser $User_Name | ldapsearch -b"ou=Authorisation,ou=UoESD,dc=ed,dc=ac,dc=uk" -H "ldap://aviemore.ed.ac.uk" "(cn=${Computer_Name})" member | grep "member:" | awk -F "CN=" '{print $2}' | awk -F "," '{print $1}' `)

echo ${Admin_User[@]}

# Apply admin rights
for AD_User in $Admin_Users
do
	# Is there a local account with the uun name
	UUN_Present=`dscl . -list /Users | grep $AD_User`
	# check the local username maches the UUN or that the UUN is present in the local node.
	if  [ "${User_Name}@ED.AC.UK" == "$Auth_User" ] || [ "$AD_User" == "$UUN_Present" ];
	then
		if ! [ "$Admin_Exists" == "$AD_User" ];
		then
			/usr/sbin/dseditgroup -o edit -a $AD_User -t user admin
		fi
	fi
done

UUN_Present=`dscl . -list /Users | grep $UUN`

# Revoke admin rights

if ! [ "$Admin_Group" == "$Computer_Name" ] && [ "$UUN" == "$UUN_Present" ];
then
	if [ "$Admin_Exists" == "$UUN" ];
	then
		/usr/sbin/dseditgroup -o edit -d $UUN -t user admin
	fi
	if [ "$Admin_Exists" == "$User_Name" ];
	then
		/usr/sbin/dseditgroup -o edit -d $User_Name -t user admin
	fi
fi

exit 0;
